diff --git a/include/system/camera.h b/include/system/camera.h
index 0570ca0..81660a9 100644
--- a/include/system/camera.h
+++ b/include/system/camera.h
@@ -202,6 +202,10 @@ enum {
      */
 #ifndef CAMERA_VENDOR_L_COMPAT
     CAMERA_CMD_SET_VIDEO_FORMAT = 11,
+    CAMERA_CMD_SET_FLIP_ON = 12,
+    MULTI_FRAME_SHOT_START            = 1261,
+    AUTO_LOW_LIGHT_SET                = 1351,
+    HDR_PICTURE_MODE_CHANGE           = 1273,
 
     CAMERA_CMD_VENDOR_START = 20,
     /**
@@ -358,6 +362,11 @@ typedef struct camera_frame_metadata {
      * An array of the detected faces. The length is number_of_faces.
      */
     camera_face_t *faces;
+
+    /**
+     * Value for low light condition
+     */
+    int32_t light_condition;
 } camera_frame_metadata_t;
 
 __END_DECLS
diff --git a/init/builtins.cpp b/init/builtins.cpp
index 7320b91..f8c0847 100755
--- a/init/builtins.cpp
+++ b/init/builtins.cpp
@@ -1139,6 +1139,15 @@ static int do_wait(const std::vector<std::string>& args) {
         return -1;
 }
 
+static int do_pipe(const std::vector<std::string>& args) {
+    mode_t mode = get_mode(args[1].c_str());
+    if (mkfifo(args[2].c_str(), mode) < 0) {
+        ERROR("peter do pipe error haha\n");
+        return -errno;
+    }
+    return 0;
+}
+
 /*
  * Callback to make a directory from the ext4 code
  */
@@ -1210,6 +1219,7 @@ BuiltinFunctionMap::Map& BuiltinFunctionMap::map() const {
         {"verity_load_state",       {0,     0,    do_verity_load_state}},
         {"verity_update_state",     {0,     0,    do_verity_update_state}},
         {"wait",                    {1,     2,    do_wait}},
+        {"pipe",                    {1,     2,    do_pipe}},
         {"write",                   {2,     4,    do_write}},
     };
     return builtin_functions;
diff --git a/libion/Android.mk b/libion/Android.mk
index 6562cd3..8263c7b 100644
--- a/libion/Android.mk
+++ b/libion/Android.mk
@@ -4,9 +4,10 @@ include $(CLEAR_VARS)
 LOCAL_SRC_FILES := ion.c
 LOCAL_MODULE := libion
 LOCAL_MODULE_TAGS := optional
-LOCAL_SHARED_LIBRARIES := liblog
-LOCAL_C_INCLUDES := $(LOCAL_PATH)/include $(LOCAL_PATH)/kernel-headers
-LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/include $(LOCAL_PATH)/kernel-headers
+LOCAL_SHARED_LIBRARIES := liblog libcutils
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/include $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include/video
+LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/include $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include/video
+LOCAL_ADDITIONAL_DEPENDENCIES := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr
 LOCAL_CFLAGS := -Werror
 include $(BUILD_SHARED_LIBRARY)
 
@@ -14,8 +15,9 @@ include $(CLEAR_VARS)
 LOCAL_SRC_FILES := ion.c ion_test.c
 LOCAL_MODULE := iontest
 LOCAL_MODULE_TAGS := optional tests
-LOCAL_C_INCLUDES := $(LOCAL_PATH)/include $(LOCAL_PATH)/kernel-headers
-LOCAL_SHARED_LIBRARIES := liblog
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/include $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include/video
+LOCAL_ADDITIONAL_DEPENDENCIES := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr
+LOCAL_SHARED_LIBRARIES := liblog libcutils
 LOCAL_CFLAGS := -Werror
 include $(BUILD_EXECUTABLE)
 
diff --git a/libion/include/ion/ion.h b/libion/include/ion/ion.h
index f47793d..d276b16 100644
--- a/libion/include/ion/ion.h
+++ b/libion/include/ion/ion.h
@@ -35,6 +35,7 @@ int ion_alloc(int fd, size_t len, size_t align, unsigned int heap_mask,
 int ion_alloc_fd(int fd, size_t len, size_t align, unsigned int heap_mask,
               unsigned int flags, int *handle_fd);
 int ion_sync_fd(int fd, int handle_fd);
+int ion_invalidate_fd(int fd, int handle_fd);
 int ion_free(int fd, ion_user_handle_t handle);
 int ion_map(int fd, ion_user_handle_t handle, size_t length, int prot,
             int flags, off_t offset, unsigned char **ptr, int *map_fd);
diff --git a/libion/ion.c b/libion/ion.c
index d1984bd..a411c76 100644
--- a/libion/ion.c
+++ b/libion/ion.c
@@ -31,6 +31,11 @@
 #include <linux/ion.h>
 #include <ion/ion.h>
 
+struct file;
+
+#include <stdbool.h>
+#include "ion_sprd.h"
+
 int ion_open()
 {
     int fd = open("/dev/ion", O_RDWR);
@@ -169,6 +174,16 @@ int ion_import(int fd, int share_fd, ion_user_handle_t *handle)
     return ret;
 }
 
+int ion_invalidate_fd(int fd, int handle_fd)
+{
+	struct ion_custom_data custom_data;
+	if (handle_fd < 0)
+		return -EINVAL;
+	custom_data.cmd = ION_SPRD_CUSTOM_INVALIDATE;
+	custom_data.arg = (unsigned long)handle_fd;
+	return ioctl(fd, ION_IOC_CUSTOM, &custom_data);
+}
+
 int ion_sync_fd(int fd, int handle_fd)
 {
     struct ion_fd_data data = {
